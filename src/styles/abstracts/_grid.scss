@use 'sass:math';
@use '../abstracts/breakpoints' as *;

$grid-columns: 12;
$grid-gaps: (
	'0': 0,
	'1': 10px,
	'2': 20px,
	'3': 30px,
	'4': 40px,
);

//base layout classes
.container {
	width: 100%;
	max-width: 1200px;
}

.row {
	display: flex;
	flex-flow: row wrap;
}

// grid - gaps
@each$key, $val in $grid-gaps {
	.gap-#{$key} > * {
		padding: $val;
	}
	.gap-#{$key} {
		margin-left: -$val;
		margin-right: -$val;
	}
}

// col classes

@include xxs {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-xxs {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}

@include xs {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-xs {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}

@include sm {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-sm {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}

@include md {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-md {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}

@include lg {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-lg {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}

@include xl {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-xl {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}

@include xxl {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-xxl {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}
